<drac2>
pf = ctx.prefix
alias = ctx.alias
a = argparse(&ARGS&)
n = '\n'
ch = character()
skills = ["acrobatics", "animalHandling", "arcana", "athletics", "deception", "history", "insight", "intimidation", "investigation", "medicine", "nature", "perception", "performance", "persuasion", "religion", "sleightOfHand", "stealth", "survival"]
jLog = load_yaml(get('joblog','[]'))
jobTimer = load_yaml(get_svar("jobTimer",'{"cooldown":86400,"normalLength":3600,"goodLength":2700,"badLength":4500}'))

#Load guild and personal job gvars, removing duplicates. If none exist, grants user default job gvar.
gJobVars = load_yaml(get_svar('guildJobs','[]'))
pJobVars = load_yaml(get('personalJobs','[]'))
compendium = gJobVars + pJobVars
cleanCompendium = []
joblist = []
if not compendium:
	set_uvar('personalJobs',dump_yaml(["f9ff936c-b557-4ae1-b43c-bc5824aeb171"]))
	compendium = load_yaml(get('personalJobs','[]'))
for gvar in compendium:
	if gvar not in cleanCompendium:
		cleanCompendium.append(gvar)
for gvar in cleanCompendium:
	joblist += load_yaml(get_gvar(gvar).replace("\t"," "))

#Sets the time-based variables
now = int(time())
thisWeek = ceil((now-259200)/604800)-2693
cutoff = ((thisWeek+2693)*604800)+259200

#Sets some initial variables that I can't get to work better :(
if jLog:
	lastShift = int(jLog[-1]['e'])
	shiftCount = [d['w'] for d in jLog]
else:
	lastShift = 0
	shiftCount = [0]

#Templates for svars
if a.get("template"):
	if a.get("jobs"):
		return f"""embed -title "Jobs Template" -desc "Make a Gvar in the following format ```YAML
---
- name: Server
  skill: acrobatics
  blurb: serves some food!
- name: Stable Keeper
  skill: animalHandling
  blurb: cares for some animals!```
and then place it in an svar named `guildJobs` in the follow format
```YAML
- gvar-address-one
- gvar-address-two```" """
	if a.get("timer"):
		return f"""embed -title "Timer Template" -desc "Make an svar named `jobTimer` in the following format. Each value is in seconds.
```YAML
---
cooldown: 86400
normalLength: 3600
goodLength: 2700
badLength: 4500```" """

#My attempt at a subbing function
if a.get("sub"):

	#Push person gvars to the server
	if a.get("serve"):
		return f'multiline{n}{pf}svar "guildJobs" {dump_yaml(cleanCompendium)}{n}{pf}embed -title "{ctx.author.name} shared their job listings!" -desc "Everyone on the server can now work those jobs!" '
	
	#Pull servar gvars to personal collection
	if a.get("sync"):
		set_uvar("personalJobs",dump_yaml(cleanCompendium))
		return f'embed -title "{ctx.author.name} copies some job listings!" -desc "You are now subscribed to everything the server was!" '

	#Server sub functions
	if a.get("server"):
		#Subscribe a server gvar
		if len("&3&")==36 and "&3&" not in gJobVars:
			gJobVars.append("&3&")
			return f'multiline{n}{pf}svar "guildJobs" {dump_yaml(gJobVars)}{n}{pf}embed -title "{ctx.author.name} Looks At Some Job Listings!" -desc "You have subscribed the server to {"&3&"}." '
		else:
			return f'embed -title "{ctx.author.name} Tries To Look At Jobs!" -desc "{"&3&"} is not a valid gvar!" '
	
	#Subscribe a personal gvar
	if len("&2&")==36 and "&2&" not in pJobVars:
		pJobVars.append("&2&")
		set_uvar("personalJobs",dump_yaml(pJobVars))
		return f'embed -title "{ctx.author.name} looks at some job listings!" -desc "You are now subscribed to {"&2&"}." '
	else:
		return f'embed -title "{ctx.author.name} Tries To Look At Jobs!" -desc "{"&2&"} is not a valid gvar!" '

if a.get("unsub"):

	#Unsubscribe the server from a gvar
	if a.get("server"):
		if "&3&" in gJobVars:
			gJobVars.remove("&3&")
			return f'multiline{n}{pf}svar "guildJobs" {dump_yaml(gJobVars)}{n}{pf}embed -title "You have turned down some jobs for the server!" -desc "You have unsubscribed the server from {"&3&"}." '
		else:
			return f'embed -title "{ctx.author.name} tries to turn down some jobs!" -desc "Your server is not subscribed to {"&3&"}!" '

	#Unsubscribe a personal gvar
	if len("&2&")==36:
		if "&2&" in pJobVars:
			pJobVars.remove("&3&")
			set_uvar('personalJobs',dump_yaml(pJobVars))
			return f'embed -title "{ctx.author.name} turns down some jobs!" -desc "You have unsubscribed from {"&3&"}." '
		else:
			return f'embed -title "{ctx.author.name} tries to down some jobs!" -desc "You are not subscribed to {"&3&"}!" '

	return f'embed -title "{ctx.author.name} looks at some job listings!" -desc "That is not a valid gvar address." '

#Opens the joblog if "log" in ARGS
if a.get("log"):
	if a.get("remove"):
		for entry in jLog:
			if a.last("week",0,type_=int) == int(entry["w"]) and a.last("shift",0,type_=int) == int(entry["s"]):
				jLog.remove(entry)
				ch.set_cvar('joblog',dump_yaml(jLog))
				return f'embed -title "{name} strikes an entry from their job log!" -desc "It is as if <t:{entry["e"]}> never happened." '
		return f'embed -title "{name} tries to strike an entry from their job log!" -desc "There is no such entry in your job log!" '
	TW = ""
	LW = ""
	thisWeek = a.last("week",thisWeek,type_=int)
	lastWeek = thisWeek - 1
	for entry in jLog:
		if int(entry["w"]) == thisWeek:
			TW += f'Shift {entry["s"]} <t:{entry["e"]}:d> <#{entry["l"]}> - {entry["j"]}{n}'
		elif int(entry["w"]) == lastWeek:
			LW += f'Shift {entry["s"]} <t:{entry["e"]}:d> <#{entry["l"]}> - {entry["j"]}{n}'
	if TW and LW:
		out = f'-f "Week {thisWeek}|{TW}" -f "Week {lastWeek}|{LW}"'
	elif TW and not LW:
		out = f'-f "Week {thisWeek}|{TW}"'
	elif not TW and LW:
		out = f'-f "Week {lastWeek}|{LW}"'
	else:
		out = f'-desc "There are no entries in your job log! Get to work!"'
	return f'''embed -title "{name} checks their Job Log!" {out} '''

#Clears the log if "clear" in ARGS
if a.get("clear"):
	ch.delete_cvar('joblog')
	return f'embed -title "{name} clears their Job Log!" -desc "Nothing to see here!" '

#Shows a list of available jobs by skill if "list" in ARGS
if a.get("list"):
	popList = ""
	for skill in skills:
		matchJobs = []
		for x in joblist:
			if skill.lower() == x["skill"].lower():
				matchJobs.append(f'{x["name"].title()}')
		popList += f'-f "{skill[0].upper()+skill[1:]}|{", ".join(matchJobs)}" '
	return f'embed -title "Job Listings" {popList} '

#Breaks out of code if it has been less than 24 hours since last worked shift
if now-lastShift < jobTimer["cooldown"]:
	return f'''embed -title "Your shift has yet to start!" -desc "Try again at <t:{lastShift+jobTimer["cooldown"]}:t>" '''

#Checks which job the input goes with, if any
jobMatch = []
for x in joblist:
	if "&1&".lower() in x["name"].lower():
		jobMatch.append(x)
	if "&1&".lower() == x["name"].lower():
		jobMatch = [x]
		break

if len(jobMatch) > 1:
	return f'embed -title "{name} Tries To Do His Job" -desc "You need to be more specific! Use `{ctx.prefix+ctx.alias} list` in order to see the full job names.{n+n}Possible Matches:{n}{n.join([x.name for x in jobMatch])}" '

if jobMatch:
	job = jobMatch[0]

#Returns the help embed if "help" in ARGS or if ARGS have less than 3 characters
if a.get("help") or len("&*&")<3 or not get("job",0):
	return f'''embed -title "{name} needs some help!" -desc "This alias is used to perform and log RP working activities." -f "{pf}{alias} list|This brings up a list of the possible jobs to be performed." -f "{pf}{alias} name of job|This will roll for how well you did on your job." -f "{pf}{alias} log [-week #]|This will bring up a log of your work history for this week and last week. If you enter a number, it will bring up the log for that week instead." -f "{pf}{alias} sub [server] <gvar>|Subscribe yourself or the server to a list of jobs!" -f "{pf}{alias} unsub [server] <gvar>|Unsubscribe yourself or the server to a list of jobs!" -f "{pf}{alias} sub sync|Copy the server jobs to a uvar." -f "{pf}{alias} sub serve|Share your personal jobs with the server." -f "{pf}{alias} template <jobs/timer>|This will display a template for how to make your own jobs or change the cooldown/duration of shifts." -f "{pf}{alias} help|What you're looking at now!" '''
		
#grab adv/dis from our parsed args and make it a boolean. adv=True, dis=False, neither is None.
adv = a.adv(boolwise=True)

#grab the reroll number if the character has the csetting reroll or default to None
reroll_number = ch.csettings.get("reroll", None)

#grab a minimum from our args like a standard !check, (-mc #) or set it to 10 if the character has the csetting 'talent' set to True and has proficiency or expertise in the chosen skill.
minimum_check = a.last('mc', None, int) or (10 if ch.csettings.get("talent", False) and ch.skills[x["skill"]].prof>=1 else None)

#grab our bonuses, if any and add them to our roll
bonus = ("+"+a.join('b', '+', '') if a.get('b') else '')
if a.get("guidance"):
	bonus += " +1d4[Guidance]"

#put all those arguments in the proper places in our d20() function, inside a vroll().
jobPerf = vroll(ch.skills[x["skill"]].d20(adv, reroll_number, minimum_check)+bonus)

#Determines the length of the shift and outputs a little blurb
if jobPerf.total < 10:
	perf = 'Something has gone wrong! Quick, try to clean up your mess!'
	dur = now+jobTimer["badLength"]
elif jobPerf.total > 9 and jobPerf.total < 20:
	perf = 'An unevenful shift awaits you. Hope you have some way to pass the time!'
	dur = now+jobTimer["normalLength"]
else:
	perf = "Wow! Someone really knows what they're doing!"
	dur = now+jobTimer["goodLength"]

#Creates the entry for the current shift, then adds it to the joblog cvar
entry = {
	"e":f'{now}',
	"l":ctx.channel.id,
	"w":thisWeek,
	"s":shiftCount.count(thisWeek) + 1,
	"j":job["name"]
}
jLog.append(entry)
ch.set_cvar('joblog',dump_yaml(jLog))

return f'''embed -title "{name} {job["blurb"]}" -f "{jobPerf}|{perf}" -f "Time|You will finish your shift at <t:{dur}:t>" '''
</drac2> {{f'-f "Work Week Ends|<t:{cutoff}>" -color {color} -thumb {image} -footer "Made by Julius Caesar#3180 and Doireann#8306"' if not a.get('sub') else ''}}
